{
	"info": {
		"_postman_id": "90f4bf6e-5cfb-4f71-830c-75655401d1de",
		"name": "Products",
		"description": "In this collection all the APIs of fakestoreapi related to Products has been covered.\n\n# **APIs tested:**\n\n- GET - 7 API\n- POST - 1 API\n- PUT - 1 API\n- PATCH - 1 API\n- DELETE - 1 API\n    \n\n# **Features covered:**\n\n- Data driven testing\n- JSON Schema Validations\n- Expected response data validations\n- Sorting of data\n- Limiting the returned data\n    \n\n# Variables used:\n\n- Collection variable\n- Global variables\n- Built-in variables",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30663117",
		"_collection_link": "https://www.postman.com/crimson-shadow-36766/workspace/fakestore-api/collection/30663117-90f4bf6e-5cfb-4f71-830c-75655401d1de?action=share&source=collection_link&creator=30663117"
	},
	"item": [
		{
			"name": "get single product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const expected_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"rating\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"rate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"count\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"rate\",\r",
							"        \"count\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\",\r",
							"    \"rating\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Response is an object and not empty\", function(){\r",
							"    pm.expect(json_response).to.be.a('object').and.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Expected products validation\", function(){\r",
							"    pm.expect(json_response.id).to.be.eql(parseInt(pm.collectionVariables.get(\"id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Expected JSON schema validation\", function(){\r",
							"    pm.response.to.have.jsonSchema(expected_schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products/{{id}}",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"{{id}}"
					]
				},
				"description": "In this GET request we are getting single product returned so we are validating :\n\n- successful response\n- JSON schema validation\n- Returned response should be a single object and not empty\n- Expected product only returned comparing with provided product id"
			},
			"response": []
		},
		{
			"name": "get all products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const expected_schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"title\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"price\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"description\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"category\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"image\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"rating\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"rate\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"count\": {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"rate\",\r",
							"            \"count\"\r",
							"          ]\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"title\",\r",
							"        \"price\",\r",
							"        \"description\",\r",
							"        \"category\",\r",
							"        \"image\",\r",
							"        \"rating\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"const singleItem_schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"title\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"price\": {\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"description\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"category\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"image\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"rating\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"rate\": {\r",
							"                        \"type\": \"number\"\r",
							"                    },\r",
							"                    \"count\": {\r",
							"                        \"type\": \"integer\"\r",
							"                    }\r",
							"                },\r",
							"                \"required\": [\r",
							"                    \"rate\",\r",
							"                    \"count\"\r",
							"                ]\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"title\",\r",
							"            \"price\",\r",
							"            \"description\",\r",
							"            \"category\",\r",
							"            \"image\",\r",
							"            \"rating\"\r",
							"        ]\r",
							"};\r",
							"\r",
							"pm.test(\"Response is an array and not empty\", function(){\r",
							"    pm.expect(json_response).to.be.a('array').and.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Length of the returned products(20)\", function(){\r",
							"    pm.expect(json_response.length).to.be.eql(20)\r",
							"})\r",
							"\r",
							"pm.test(\"Expected JSON schema validation\", function(){\r",
							"    // folowing line will check all the returned response items which could be in 1000s so to optimize it we can validate only 1 item and repeat same validation for the rest\r",
							"    // pm.response.to.have.jsonSchema(expected_schema);\r",
							"    // Optimized schema validation\r",
							"    json_response.forEach(function(item) {\r",
							"        pm.expect(item).to.be.jsonSchema(singleItem_schema);\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products",
					"host": [
						"{{base_url}}products"
					]
				},
				"description": "In this GET request we are getting all the products returned so we are validating :\n\n- successful response\n- JSON schema validation\n- Length of the array as expected (as there are limited data)\n- Returned response should be an array and not empty"
			},
			"response": []
		},
		{
			"name": "get limited products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const singleProduct_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"rating\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"rate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"count\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"rate\",\r",
							"        \"count\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\",\r",
							"    \"rating\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Products limit validation\", function(){\r",
							"    pm.expect(json_response.length).to.be.eql(parseInt(pm.collectionVariables.get(\"limit\")))\r",
							"});\r",
							"\r",
							"pm.test(\"json schema validation\", function(){\r",
							"    json_response.forEach(function(item) {\r",
							"        pm.expect(item).to.be.jsonSchema(singleProduct_schema);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"response is an array and not empty\", function(){\r",
							"    pm.expect(json_response).to.be.a('array').and.is.not.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products?limit={{limit}}",
					"host": [
						"{{base_url}}products"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{limit}}"
						}
					]
				},
				"description": "In this GET request we are getting array of products returned so we are validating :\n\n- successful response\n    \n- JSON schema validation\n    \n- Returned response should be an array and not empty\n    \n- Expected number of products are returned according to given limit"
			},
			"response": []
		},
		{
			"name": "get sorted products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const singleItem_schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": {\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"title\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"price\": {\r",
							"                \"type\": \"number\"\r",
							"            },\r",
							"            \"description\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"category\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"image\": {\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"rating\": {\r",
							"                \"type\": \"object\",\r",
							"                \"properties\": {\r",
							"                    \"rate\": {\r",
							"                        \"type\": \"number\"\r",
							"                    },\r",
							"                    \"count\": {\r",
							"                        \"type\": \"integer\"\r",
							"                    }\r",
							"                },\r",
							"                \"required\": [\r",
							"                    \"rate\",\r",
							"                    \"count\"\r",
							"                ]\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"id\",\r",
							"            \"title\",\r",
							"            \"price\",\r",
							"            \"description\",\r",
							"            \"category\",\r",
							"            \"image\",\r",
							"            \"rating\"\r",
							"        ]\r",
							"}; \r",
							"// This test will check the order if asc is provided then first item should be of id 1 and if desc is provided then id should be 20\r",
							"pm.test(\"validate returned items are in sorted order\", function(){\r",
							"    sorting_order = pm.collectionVariables.get(\"sort\");\r",
							"    if(sorting_order == 'asc'){\r",
							"        pm.expect(json_response[0].id).to.be.eql(1)\r",
							"    }else{\r",
							"        pm.expect(json_response[0].id).to.be.eql(20)\r",
							"    };\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array and not empty\", function(){\r",
							"    pm.expect(json_response).to.be.a('array').and.not.be.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Length of the returned products(20)\", function(){\r",
							"    pm.expect(json_response.length).to.be.eql(20)\r",
							"});\r",
							"\r",
							"pm.test(\"Expected JSON schema validation\", function(){\r",
							"    // Optimized schema validation\r",
							"    json_response.forEach(function(item) {\r",
							"        pm.expect(item).to.be.jsonSchema(singleItem_schema);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products?sort={{sort}}",
					"host": [
						"{{base_url}}products"
					],
					"query": [
						{
							"key": "sort",
							"value": "{{sort}}"
						}
					]
				},
				"description": "In this GET request we are getting array of products returned so we are validating :\n\n- successful response\n- JSON schema validation\n- Returned response should be an array and not empty\n- Expected sorting order of products are returned according to given sort order asc or desc"
			},
			"response": []
		},
		{
			"name": "get products with limit/sort",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const singleProduct_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"rating\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"rate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"count\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"rate\",\r",
							"        \"count\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\",\r",
							"    \"rating\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"products limit validation\", function(){\r",
							"    pm.expect(json_response.length).to.be.eql(parseInt(pm.collectionVariables.get(\"limit\")))\r",
							"});\r",
							"\r",
							"pm.test(\"validate returned items are in sorted order\", function(){\r",
							"    sorting_order = pm.collectionVariables.get(\"sort\");\r",
							"    if(sorting_order == 'asc'){\r",
							"        pm.expect(json_response[0].id).to.be.eql(1)\r",
							"    }else{\r",
							"        pm.expect(json_response[0].id).to.be.eql(parseInt(pm.collectionVariables.get(\"limit\")))\r",
							"    };\r",
							"});\r",
							"\r",
							"pm.test(\"json schema validation\", function(){\r",
							"    json_response.forEach(function(item) {\r",
							"        pm.expect(item).to.be.jsonSchema(singleProduct_schema);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"response is an array and not empty\", function(){\r",
							"    pm.expect(json_response).to.be.a('array').and.is.not.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products?limit={{limit}}&sort={{sort}}",
					"host": [
						"{{base_url}}products"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{limit}}"
						},
						{
							"key": "sort",
							"value": "{{sort}}"
						}
					]
				},
				"description": "In this GET request we are getting array of products returned so we are validating :\n\n- successful response\n- JSON schema validation\n- Returned response should be an array and not empty\n- Expected sorting order of products are returned according to given sort order asc or desc\n    \n- Expected limit of products are returned according to given limit value"
			},
			"response": []
		},
		{
			"name": "get all categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"\r",
							"const expected_schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"expected schema validation\", function(){\r",
							"    pm.response.to.have.jsonSchema(expected_schema);\r",
							"});\r",
							"\r",
							"pm.test(\"length of categories validation\", function(){\r",
							"    pm.expect(json_response.length).to.be.eql(4);\r",
							"});\r",
							"\r",
							"pm.test(\"response is an array and not empty validation\", function(){\r",
							"    pm.expect(json_response).to.be.a('array').and.is.not.empty;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products/categories",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"categories"
					]
				},
				"description": "In this GET request we are getting all the products returned so we are validating :\n\n- successful response\n    \n- JSON schema validation\n    \n- Length of the array as expected (as there are limited data)\n    \n- Returned response should be an array and not empty"
			},
			"response": []
		},
		{
			"name": "get specific category product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const singleItem_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"rating\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"rate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"count\": {\r",
							"          \"type\": \"number\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"rate\",\r",
							"        \"count\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\",\r",
							"    \"rating\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"expected schema validation\", function(){\r",
							"    json_response.forEach(function(item) {\r",
							"        pm.expect(item).to.be.jsonSchema(singleItem_schema);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"response is an array and not empty validation\", function(){\r",
							"    pm.expect(json_response).to.be.a('array').and.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"only products of the given category is returned\", function(){\r",
							"    let category =  pm.collectionVariables.get(\"category\")\r",
							"    json_response.forEach(function(item) {\r",
							"        pm.expect(item.category).to.be.eql(category);\r",
							"    }); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}products/category/{{category}}",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"category",
						"{{category}}"
					]
				},
				"description": "In this GET request we are getting single product returned so we are validating :\n\n- successful response\n    \n- JSON schema validation\n    \n- Returned response should be a single an array and not empty\n    \n- Expected category products only returned comparing with provided category"
			},
			"response": []
		},
		{
			"name": "add product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const expected_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\"\r",
							"  ]\r",
							"};\r",
							"pm.test(\"response validation\", function(){\r",
							"    pm.expect(json_response).to.have.property(\"id\");\r",
							"    pm.expect(json_response.id).to.be.a('number')\r",
							"});\r",
							"\r",
							"pm.test(\"response is an object and not empty validation\", function(){\r",
							"    pm.expect(json_response).to.be.a('object').and.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Expected products validation\", function(){\r",
							"    pm.expect(json_response.id).to.be.eql(21);\r",
							"    pm.expect(json_response.title).to.be.eql(pm.collectionVariables.get(\"title\"));\r",
							"    pm.expect(json_response.description).to.be.eql(pm.collectionVariables.get(\"description\"));\r",
							"    pm.expect(json_response.price).to.be.eql(parseFloat(pm.collectionVariables.get(\"price\")));\r",
							"    pm.expect(json_response.image).to.be.eql(pm.collectionVariables.get(\"image\"));\r",
							"    pm.expect(json_response.category).to.be.eql(pm.collectionVariables.get(\"category\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Expected JSON schema validation\", function(){\r",
							"    pm.response.to.have.jsonSchema(expected_schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}products",
					"host": [
						"{{base_url}}products"
					]
				},
				"description": "In this POST request we are adding the data and getting object of product returned so we are validating :\n\n- successful response\n- JSON schema validation\n- Returned response should be an object and not empty\n- Expected product details are returned according to provided data"
			},
			"response": []
		},
		{
			"name": "update product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const expected_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\"response validation\", function(){\r",
							"    pm.expect(json_response).to.have.property(\"id\");\r",
							"    pm.expect(json_response.id).to.be.a('number')\r",
							"});\r",
							"\r",
							"pm.test(\"response is an object and not empty validation\", function(){\r",
							"    pm.expect(json_response).to.be.a('object').and.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Expected products validation\", function(){\r",
							"    pm.expect(json_response.id).to.be.eql(parseInt(pm.collectionVariables.get(\"id\")));\r",
							"    pm.expect(json_response.title).to.be.eql(pm.collectionVariables.get(\"title\"));\r",
							"    pm.expect(json_response.description).to.be.eql(pm.collectionVariables.get(\"description\"));\r",
							"    pm.expect(json_response.price).to.be.eql(parseFloat(pm.collectionVariables.get(\"price\")));\r",
							"    pm.expect(json_response.image).to.be.eql(pm.collectionVariables.get(\"image\"));\r",
							"    pm.expect(json_response.category).to.be.eql(pm.collectionVariables.get(\"category\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Expected JSON schema validation\", function(){\r",
							"    pm.response.to.have.jsonSchema(expected_schema);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}products/{{id}}",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"{{id}}"
					]
				},
				"description": "In this POST request we are adding the data and getting object of product returned so we are validating :\n\n- successful response\n- JSON schema validation\n- Returned response should be an object and not empty\n- Expected product details are returned according to provided data"
			},
			"response": []
		},
		{
			"name": "partial update product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const expected_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"\r",
							"pm.test(\"response validation\", function(){\r",
							"    pm.expect(json_response).to.have.property(\"id\");\r",
							"    pm.expect(json_response.id).to.be.a('number')\r",
							"});\r",
							"\r",
							"pm.test(\"response is an object and not empty validation\", function(){\r",
							"    pm.expect(json_response).to.be.a('object').and.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Expected products validation\", function(){\r",
							"    pm.expect(json_response.id).to.be.eql(parseInt(pm.collectionVariables.get(\"id\")));\r",
							"    pm.expect(json_response.title).to.be.eql(pm.collectionVariables.get(\"title\"));\r",
							"    pm.expect(json_response.description).to.be.eql(pm.collectionVariables.get(\"description\"));\r",
							"    pm.expect(json_response.image).to.be.eql(pm.collectionVariables.get(\"image\"));\r",
							"    pm.expect(json_response.category).to.be.eql(pm.collectionVariables.get(\"category\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Expected JSON schema validation\", function(){\r",
							"    pm.response.to.have.jsonSchema(expected_schema);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}products/{{id}}",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"{{id}}"
					]
				},
				"description": "In this POST request we are adding the data and getting object of product returned so we are validating :\n\n- successful response\n    \n- JSON schema validation\n    \n- Returned response should be an object and not empty\n    \n- Expected product details are returned according to provided data"
			},
			"response": []
		},
		{
			"name": "delete product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const json_response = pm.response.json();\r",
							"const expected_schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"id\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"title\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"price\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"description\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"category\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"image\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"id\",\r",
							"    \"title\",\r",
							"    \"price\",\r",
							"    \"description\",\r",
							"    \"category\",\r",
							"    \"image\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"response validation\", function(){\r",
							"    pm.expect(json_response).to.have.property(\"id\");\r",
							"    pm.expect(json_response.id).to.be.a('number')\r",
							"});\r",
							"\r",
							"pm.test(\"response is an object and not empty validation\", function(){\r",
							"    pm.expect(json_response).to.be.a('object').and.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Expected products validation\", function(){\r",
							"    pm.expect(json_response.id).to.be.eql(parseInt(pm.collectionVariables.get(\"id\")));\r",
							"});\r",
							"\r",
							"pm.test(\"Expected JSON schema validation\", function(){\r",
							"    pm.response.to.have.jsonSchema(expected_schema);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}products/{{id}}",
					"host": [
						"{{base_url}}products"
					],
					"path": [
						"{{id}}"
					]
				},
				"description": "In this DELETE request we are deleting cart and getting object of cart item returned so we are validating :\n\n- successful response\n- JSON schema validation\n- Returned response should be an object and not empty\n- Expected product details are returned according to deleted data"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Assigning the values from csv file to collection level variables",
					"pm.collectionVariables.set(\"id\", pm.iterationData.get(\"id\"));",
					"pm.collectionVariables.set(\"title\", pm.iterationData.get(\"title\"));",
					"pm.collectionVariables.set(\"price\", pm.iterationData.get(\"price\"));",
					"pm.collectionVariables.set(\"description\", pm.iterationData.get(\"description\"));",
					"pm.collectionVariables.set(\"category\", pm.iterationData.get(\"category\"));",
					"pm.collectionVariables.set(\"image\", pm.iterationData.get(\"image\"));",
					"pm.collectionVariables.set(\"rate\", pm.iterationData.get(\"rate\"));",
					"pm.collectionVariables.set(\"count\", pm.iterationData.get(\"count\"));",
					"",
					"const limit = pm.variables.replaceIn('{{$randomInt}}') % 20 + 1;",
					"pm.collectionVariables.set(\"limit\", limit);",
					"const order = ['desc', 'asc']",
					"pm.collectionVariables.set(\"sort\",  order[_.random(order.lenght)])",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"pm.test(\"successful response validation\", function(){",
					"    pm.response.to.have.status(200)",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "",
			"type": "string"
		},
		{
			"key": "title",
			"value": "",
			"type": "string"
		},
		{
			"key": "price",
			"value": "",
			"type": "string"
		},
		{
			"key": "description",
			"value": "",
			"type": "string"
		},
		{
			"key": "category",
			"value": "",
			"type": "string"
		},
		{
			"key": "image",
			"value": "",
			"type": "string"
		},
		{
			"key": "rate",
			"value": "",
			"type": "string"
		},
		{
			"key": "count",
			"value": "",
			"type": "string"
		},
		{
			"key": "limit",
			"value": "",
			"type": "string"
		},
		{
			"key": "sort",
			"value": "",
			"type": "string"
		}
	]
}